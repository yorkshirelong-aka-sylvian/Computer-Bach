let s = new Twinkle()
s.initGui()
let output = new Tone.Multiply(.1).toDestination()
s.connect(output)


let s1 = new Twinkle()
s1.initGui()
s1.connect(output)


let gui = new p5(sketch, Canvas)
// === All Sequences ===
let knob0 = gui.Fader({
  label:'Seq0',
  x: 10, y:1, size:1,
  min:0, max:7, curve:2,
  callback: function(x){s.expr(i=> i%x)}
})

let knob1 = gui.Fader({
  label:'Seq1',
  x: 20, y:1, size:1,
  min:0, max:7, curve:2,
  callback: function(x){s1.expr(i=> i%5+x)}
})

/*
let knob2 = gui.Knob({
  label:'root',
  x: 35, y:30, size:1.5,
  min:0, max:7, curve:2,
  callback: function(x){s1.expr(i=> i%5 + root)}
})
*/
// === All Drums ===
let knob3 = gui.Fader({
  label:'Drum0',
  x: 45, y:1, size:1,
  min:0, max:7, curve:2,
  callback: function(k){d.expr(i=> i%k)}
})

let knob4 = gui.Fader({
  label:'Drum1',
  x: 55, y:1, size:1,
  min:0, max:7, curve:2,
  callback: function(k){d1.expr(i=> i%5+k)}
})
// === Knobs(Change Root) ===
Theory.tempo = 120

s.sustainTime = 1
s.sustainTime = 1

Theory.root = 'c'

s.stop()
s1.stop()

console.log(root)

let knob2 = gui. Knob({
  label: 'Root',
  x: 15, y: 40, size: 1,
  min: 0, max: 15, curve: 2,
  callback: function(x){
    x = floor(x)
    if (x == 0){
      Theory.root = 'c'
    }
    if (x == 1){
      Theory.root = 'g'
    }
    if (x == 2){
      Theory.root = 'd'
    }
    if (x == 3){
      Theory.root = 'a'
    }
    if (x == 4){
      Theory.root = 'e'
    }
    if (x == 5){
      Theory.root = 'b'
    }
    if (x == 6){
      Theory.root = 'f'
    }
    if (x == 7){
      Theory.root = 'c'
    }
    if (x == 8){
      Theory.root = 'C'
    }
    if (x == 9){
      Theory.root = 'G'
    }
    if (x == 10){
      Theory.root = 'D'
    }
    if (x == 11){
      Theory.root = 'A'
    }
    if (x == 12){
      Theory.root = 'E'
    }
    if (x == 13){
      Theory.root = 'B'
    }
    if (x == 14){
      Theory.root = 'F'
    }
    if (x == 15){
      Theory.root = 'C'
    }
  } 
})

// === Buttons ===
let Intru = gui.Button({
  label:'Intrument',
  callback: function(){
    let s = new Simpler('softPiano')
  },
  size: 1, border: 20,
  borderColor: [255,0,0],
  x:15, y:70
})
Intru.textColor = [255,255,255]

// === Lines ===
let lineA = gui.Line(0,27,100,27,{ border:4})
let lineB = gui.Line(0,55,100,55,{ border:4})
let lineC = gui.Line(35,0,35,100,{ border:4})
let lineD = gui.Line(70,0,70,100,{ border:4})
/*
let vcf_fader = gui.Slider({
  label:'cutoff',
  x: 30, y: 80, size: 5,
  min:50, max: 5000, curve: 2,
  orientation: 'horizontal'
})
vcf_fader.set(1000)

let xy = gui.Pad({
  label: 'xy',
  x: 15, y:75, size:2, value:[0,0],
  callback: function(val){ 
    console.log('xy', val)
    //s.expr(i=> (val[0]-val[1])*i)
    s.cutoff = val[0] * 2000 + 100
    s.decay = val[1] * 1 + .01
    s.sustain = 0.1
    s.release = val[1] * 1 + .01
  }
})
s.sustainTime = 0
*/
/*
let freq_knob = gui.Knob({
  label:'freq',
  x: 12, y: 30, size:1.5,
  min:0, max: 8, curve: 2,
  callback: function(x){ s.expr(i=> i%(1+x)), 16}
})
freq_knob.set( 300 )
freq_knob.borderColor = [115, 53, 10]
freq_knob.accentColor = [252, 174, 25]
freq_knob.border = 10
freq_knob.x = 12
freq_knob.y = 25
freq_knob.callback = function(x){ s.expr(i=> x, 16)}

s.sequence(' 0 2 1 3')
*/

/*
let wave_radio = gui.Radio({
  label:'waveform',
  radioOptions: ['sine','sawtooth','square','triangle'],
  callback: function(x){ console.log('radio') },
  size: 1,
  x: 50, y:20,
  horizontal: false
})
wave_radio.set('square')
wave_radio.x = 40
wave_radio.y = 25

let rolloff_radio =  gui.RadioButton({
  label:'rolloff',
  radioOptions: [-12,-24,-48],
  callback: function(x){},
  x: 50, y:52,size:1, orientation:'horizontal'
})
rolloff_radio.set('-48')
rolloff_radio.textColor = [255,255,255]
rolloff_radio.x = 60
rolloff_radio.y = 25

let enable_toggle =  gui.Toggle({
  label:'enable',
  x: 88, y:30
})
enable_toggle.textColor = [255,255,255]
*/


/*
let env_trigger = gui.Button({
  label:'trig',
  callback: function(){ },
  size: 1.5, border: 20,
  borderColor: [255,0,0],
  x:88, y:85
})
env_trigger.textColor = [255,255,255]
/*
let exampleName =  gui.Text({
  label: 'GUI Example', x:13, y:5, size:2,
  border: 2, borderRadius: 3,
  textFont: 'title'
})
exampleName.accentColor = [252, 174, 25]
exampleName.borderRadius = [252, 174, 25]

let lineA = gui.Line(0,55,100,55,{
  border:4, color: 'accent'
})
let lineB = gui.Line(27,0,27,100)
let lineC = gui.Line(75,0,75,100)/*
  Alt(option)-Enter: Evaluate Line
  Alt(option)-Shift-Enter: Evaluate Block
*/
